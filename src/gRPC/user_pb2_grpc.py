# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import user_pb2 as user__pb2


class UserManagerStub(object):
    """ユーザー管理を行うサービス
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/UserManager/get',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserResponse.FromString,
                )
        self.get_server_stream = channel.unary_stream(
                '/UserManager/get_server_stream',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserResponse.FromString,
                )
        self.get_client_stream = channel.stream_unary(
                '/UserManager/get_client_stream',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserResponse.FromString,
                )
        self.connect_chat = channel.stream_stream(
                '/UserManager/connect_chat',
                request_serializer=user__pb2.ChatMessage.SerializeToString,
                response_deserializer=user__pb2.ChatMessage.FromString,
                )


class UserManagerServicer(object):
    """ユーザー管理を行うサービス
    """

    def get(self, request, context):
        """ユーザー情報を取得する
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_server_stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_client_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def connect_chat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserResponse.SerializeToString,
            ),
            'get_server_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.get_server_stream,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserResponse.SerializeToString,
            ),
            'get_client_stream': grpc.stream_unary_rpc_method_handler(
                    servicer.get_client_stream,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserResponse.SerializeToString,
            ),
            'connect_chat': grpc.stream_stream_rpc_method_handler(
                    servicer.connect_chat,
                    request_deserializer=user__pb2.ChatMessage.FromString,
                    response_serializer=user__pb2.ChatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UserManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserManager(object):
    """ユーザー管理を行うサービス
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserManager/get',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_server_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/UserManager/get_server_stream',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_client_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/UserManager/get_client_stream',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def connect_chat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/UserManager/connect_chat',
            user__pb2.ChatMessage.SerializeToString,
            user__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
